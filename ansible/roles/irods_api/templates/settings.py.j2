"""
Django settings for moz_test project.

Generated by 'django-admin startproject' using Django 1.11.21.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
import environ
from corsheaders.defaults import default_headers


env = environ.Env(DEBUG=(bool, False))

if 'ENV_PATH' in os.environ:
    env.read_env(env.str('ENV_PATH'))
else:
    env.read_env('/etc/irods_api.conf')

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('IRODS_API_SECRET_KEY', default='testkey')

# SECURITY WARNING: don't run with debug turned on in production!
#DEBUG = False
DEBUG = True

ALLOWED_HOSTS = env.list('IRODS_API_ALLOWED_HOSTS', default=['localhost'])

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'mozilla_django_oidc',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'demo.apps.DemoConfig',
    'django_logging',
    'django_tus',
    'corsheaders',
]

AUTH_USER_MODEL = 'demo.CustomUser'

AUTHENTICATION_BACKENDS = (
#https://buildmedia.readthedocs.org/media/pdf/mozilla-django-oidc/latest/mozilla-django-oidc.pdf
#1.2.2
#no, fix in keycloak ldap mapping
#    'mozilla_django_oidc.auth.OIDCAuthenticationBackend',
    'moz_test.keycloakauth.MyOIDCAB',
    # ...
)

#for file upload within json
DATA_UPLOAD_MAX_MEMORY_SIZE=100*1024*1024

OIDC_RP_CLIENT_ID = env.str('IRODS_API_OIDC_RP_CLIENT_ID', default='')
OIDC_RP_CLIENT_SECRET = env.str('IRODS_API_OIDC_RP_CLIENT_SECRET', default='')

KEYCLOAK_REALM = env.str('IRODS_API_KEYCLOAK_REALM', default='<keycloak_realm>')

#https://review.cloudera.org/r/13045/diff/1-2/#
OIDC_OP_AUTHORIZATION_ENDPOINT = KEYCLOAK_REALM+"/protocol/openid-connect/auth"
OIDC_OP_TOKEN_ENDPOINT = KEYCLOAK_REALM+"/protocol/openid-connect/token"
OIDC_OP_USER_ENDPOINT = KEYCLOAK_REALM+"/protocol/openid-connect/userinfo"

KEYCLOAK_LOGOUT_ENDPOINT = KEYCLOAK_REALM+"/protocol/openid-connect/logout"

OIDC_RP_SIGN_ALGO = "RS256"

OIDC_OP_JWKS_ENDPOINT = KEYCLOAK_REALM+"/protocol/openid-connect/certs"

LOGIN_REDIRECT_URL = env.str('IRODS_API_LOGIN_REDIRECT_URL', default='<site>')
LOGOUT_REDIRECT_URL = env.str('IRODS_API_LOGOUT_REDIRECT_URL', default='<site>')

LOGIN_URL = env.str('IRODS_API_LOGIN_URL', default='<site>/login')

OIDC_OP_LOGOUT_URL_METHOD = 'demo.views.provider_logout'

#in line with validity of keycloak token
OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS = 2 * 24 * 3600

OIDC_VERIFY_SSL = False

#rgh, while the use of this is discouraged, OIDC_STORE_ACCESS_TOKEN may be needed to have it available to send to irods
#rgh, since we cannot send to irods due to large size, disable this
#rgh, we need this if we are backend
OIDC_STORE_ACCESS_TOKEN=True
OIDC_STORE_ID_TOKEN=True

#https://github.com/heroku/heroku-django-template/issues/55
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'mozilla_django_oidc.middleware.SessionRefresh',
    'django_logging.middleware.DjangoLoggingMiddleware',
]

#OIDC_CREATE_USER = False

#rgh, did not make a difference in token size
#OIDC_RP_SCOPES = "openid"

ROOT_URLCONF = 'moz_test.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['./demo/templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'moz_test.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env.str('IRODS_API_DB_NAME', default=''),
        'USER': env.str('IRODS_API_DB_USER', default=''),
        'PASSWORD': env.str('IRODS_API_DB_PASSWD', default=''),
        'HOST': env.str('IRODS_API_DB_HOST', default=''),
        'PORT': env.int('IRODS_API_DB_PORT', default=''),
    }
}

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/var/tmp/django_cache',
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
#STATICFILES_DIRS = [
#    os.path.join(BASE_DIR, 'static')
#]
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

#SECURE_SSL_REDIRECT = env.bool('IRODS_API_SECURE_SSL_REDIRECT', default=True)
#SECURE_PROXY_SSL_HEADER = env.tuple('IRODS_API_SECURE_PROXY_SSL_HEADER', default=('HTTP_X_FORWARDED_PROTO', 'https'))

LOGGING = {
    'version': 1,
    'formatters': {
        'verbose': {
            'format': '{name} {levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{name} {asctime} {levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': '/var/log/moz_test/debug.log',
            'formatter': 'verbose'
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO'
        },
        'irods': {
            'handlers': ['file', 'console'],
            'level': 'INFO'
        },
        'demo': {
            'handlers': ['file', 'console'],
            'level': 'INFO'
        },
        'moz_test': {
            'handlers': ['file', 'console'],
            'level': 'INFO'
        }
    }
}


# ELASTICSEARCH STUFF
DJANGO_LOGGING = {
    'ELASTICSEARCH_ENABLED': True,
    'ELASTICSEARCH_HOSTS': ["sikplrz-lexis-elasticsearch.srv.mwn.de"],
    'ELASTICSEARCH_INDEX': 'lexis-ddi-logging-json', # django-logging-json is an example name. The index has to be created in elasticsearch
    'ELASTICSEARCH_SSL': False
}

TUS_DESTINATION_DIR = env.str('IRODS_API_TUS_DESTINATION_DIR', default='/tmp/staging')
TUS_UPLOAD_DIR = env.str('IRODS_API_TUS_UPLOAD_DIR', default='/tmp/tus')
TUS_FILE_NAME_FORMAT = env.str('IRODS_API_TUS_FILE_NAME_FORMAT', default='random')

CORS_ALLOWED_ORIGINS = ['https://lexis-ddi.srv.lrz.de', 'https://lexis-webportal.srv.lrz.de', 'https://portal.msad.it4i.lexis.tech:8443']

CORS_ALLOW_HEADERS = list(default_headers) + ['Range','content-range','tus-resumable','upload-length','upload-offset','upload-concat','upload-metadata']
CELERY_BROKER_URL = '{{ irods_api_amqp_broker }}'

CELERY_BEAT_SCHEDULE = {{ irods_api_celery_beat_schedule | to_json }}


# Keycloak synchronization
KEYCLOAK_SERVICE_CLIENT=env.str('IRODS_API_KEYCLOAK_SERVICE_CLIENT', default='')
KEYCLOAK_SERVICE_SECRET=env.str('IRODS_API_KEYCLOAK_SERVICE_SECRET', default='')
KEYCLOAK_ADMIN_URL=env.str('IRODS_API_KEYCLOAK_ADMIN_URL', default='')
KEYCLOAK_ADMIN_REALM=env.str('IRODS_API_KEYCLOAK_ADMIN_REALM', default='')
